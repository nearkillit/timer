{"ast":null,"code":"import { compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport persistState from \"redux-localstorage\";\nimport { createStore } from 'redux'; // 初期State\n\nconst initialState = {\n  user: 0,\n  username: '',\n  pasword: '',\n  timers: [{\n    id: 2,\n    name: '筋トレ',\n    interval: [3, 3, 3],\n    loop: 0\n  }],\n  timerStopFlag: true\n}; // Reducer処理\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      {\n        const user = action.value.user;\n        const username = action.value.username;\n        const password = action.value.password;\n        return { ...state,\n          username,\n          password,\n          user\n        };\n      }\n\n    case 'DELETE_USER':\n      {\n        const user = 0;\n        const username = '';\n        const password = '';\n        return { ...state,\n          user,\n          username,\n          password\n        };\n      }\n\n    case 'FETCH_TIMER':\n      {\n        const timers = action.value.data.timers.map(t => {\n          return { ...t,\n            loop: 0\n          };\n        });\n        return { ...state,\n          user: action.value.data.userid,\n          timers\n        };\n      }\n\n    case 'ADD_TIMER':\n      {\n        const initialTimer = {\n          id: 0,\n          name: '',\n          interval: [],\n          loop: 5\n        };\n        const newTimer = Object.assign({}, initialTimer);\n        const newTimers = state.timers;\n        newTimer.name = action.value.timerName; // idの付与\n\n        newTimer.id = newTimers.reduce((p, c) => p > c.id ? p : c.id, 1) + 1;\n        newTimer.instanceId = 1;\n        newTimers.push(newTimer);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'DELETE_TIMER':\n      {\n        const newTimers = state.timers.filter(t => t.id !== action.value.timersId);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'RESET_TIMER':\n      {\n        const resetTimers = state.timers.map(t => {\n          return { ...t,\n            instanceId: 1\n          };\n        });\n        console.log(resetTimers);\n        return { ...state,\n          timers: resetTimers\n        };\n      }\n\n    case 'ADD_INTERVAL_TIMER':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.interval.push(5);\n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'UPDATE_INTERVAL_TIMER':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.interval[action.value.index] = action.value.intervalTime * 1;\n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'DELETE_INTERVAL_TIMER':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.interval.splice(action.value.index, 1);\n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'UPDATE_LOOP':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.loop = action.value.loop * 1;\n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'UPDATE_TIMER_STOP_FLAG':\n      {\n        return { ...state,\n          timerStopFlag: action.value\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst enhancer = compose(persistState(['timers', 'timerStopFlag'], {\n  key: 'user'\n}), applyMiddleware(thunk));\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(), enhancer);\nexport default store;","map":{"version":3,"sources":["/Users/kiritoshimura/Desktop/intervaltimer/frontend/src/modules/reducer.js"],"names":["compose","applyMiddleware","thunk","persistState","createStore","initialState","user","username","pasword","timers","id","name","interval","loop","timerStopFlag","reducer","state","action","type","value","password","data","map","t","userid","initialTimer","newTimer","Object","assign","newTimers","timerName","reduce","p","c","instanceId","push","filter","timersId","resetTimers","console","log","getTimers","getTimer","index","intervalTime","splice","enhancer","key","store","window","__REDUX_DEVTOOLS_EXTENSION__"],"mappings":"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","sourcesContent":["import { compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport persistState from \"redux-localstorage\";\nimport { createStore } from 'redux';\n\n// 初期State\nconst initialState = {    \n        user:0,\n        username:'',\n        pasword:'',\n        timers:[\n          {\n            id:2,\n            name:'筋トレ',\n            interval:[3,3,3],\n            loop:0\n          }\n        ],\n        timerStopFlag: true,             \n  }\n\n  // Reducer処理\n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'FETCH_USER': {\n        const user = action.value.user\n        const username = action.value.username\n        const password = action.value.password\n        return {...state, username, password, user }\n      }\n      case 'DELETE_USER': {\n        const user = 0\n        const username = ''\n        const password = ''\n        return {...state, user, username, password }\n      }\n      case 'FETCH_TIMER': {        \n        const timers = action.value.data.timers.map( t  => { return { ...t, loop:0 } })        \n        return {...state, user:action.value.data.userid, timers }\n      }\n      case 'ADD_TIMER': {\n        const initialTimer = { \n          id:0,\n          name:'',            \n          interval:[],\n          loop:5\n        }\n        const newTimer = Object.assign({},initialTimer)\n        const newTimers = state.timers\n        newTimer.name = action.value.timerName  \n        // idの付与\n        newTimer.id = newTimers.reduce((p,c) => p > c.id ? p : c.id , 1) + 1\n        newTimer.instanceId = 1\n        newTimers.push(newTimer)             \n        return { ...state, timers: newTimers }\n      }\n      case 'DELETE_TIMER': {        \n        const newTimers = state.timers.filter(t => t.id !== action.value.timersId)\n        return { ...state, timers: newTimers }\n      }\n      case 'RESET_TIMER': {\n        const resetTimers = state.timers.map(t =>{ return {...t, instanceId:1}})\n        console.log(resetTimers);\n        return { ...state, timers: resetTimers }\n      }\n      case 'ADD_INTERVAL_TIMER': {        \n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]        \n        getTimer.interval.push(5)        \n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t)\n        return { ...state, timers: newTimers }\n      }\n      case 'UPDATE_INTERVAL_TIMER': {\n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]\n        getTimer.interval[action.value.index] = action.value.intervalTime * 1        \n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t)        \n        return { ...state, timers: newTimers }\n      }\n      case 'DELETE_INTERVAL_TIMER': {        \n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]\n        getTimer.interval.splice(action.value.index, 1)        \n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t)        \n        return { ...state, timers: newTimers }\n      }\n      case 'UPDATE_LOOP': {\n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]        \n        getTimer.loop = action.value.loop * 1        \n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t)        \n        return { ...state, timers: newTimers }\n      }\n      case 'UPDATE_TIMER_STOP_FLAG': {\n        return { ...state, timerStopFlag: action.value}\n      }\n      default: {\n        return state\n      }\n    }\n  }\n\nconst enhancer = compose(persistState(['timers','timerStopFlag'], { key: 'user' }),applyMiddleware(thunk));\n\nconst store = createStore(reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() ,\n  enhancer\n)\n\nexport default store"]},"metadata":{},"sourceType":"module"}