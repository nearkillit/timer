{"ast":null,"code":"// 初期State\nconst initialState = {\n  uid: 0,\n  timers: [{\n    id: 0,\n    name: '筋トレ',\n    interval: [40, 20, 10],\n    loop: 5\n  }]\n}; // Reducer処理\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_TIMER':\n      {\n        const initialTimer = {\n          id: 0,\n          name: '',\n          interval: [],\n          loop: 5\n        };\n        const newTimer = Object.assign({}, initialTimer);\n        const newTimers = state.timers;\n        newTimer.name = action.value.timerName; // idの付与\n\n        newTimer.id = newTimers.reduce((p, c) => p > c.id ? p : c.id, 0) + 1;\n        newTimers.push(newTimer);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'DELETE_TIMER':\n      {\n        const newTimers = state.timers.filter(t => t.id !== action.value.timersId);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'ADD_INTERVAL_TIMER':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.interval.push(5);\n        const newTimers = getTimers.map(t => {\n          if (t.id === action.value.timersId) {\n            console.log('equal');\n            console.log(t.id);\n            console.log(getTimer);\n            return getTimer;\n          } else {\n            console.log('not equal');\n            console.log(t.id);\n            console.log(t);\n            return t;\n          }\n        }); // t.id === action.value.timersId ? getTimer : t)\n\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'UPDATE_INTERVAL_TIMER':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.interval[action.value.index] = action.value.intervalTime * 1;\n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    case 'UPDATE_LOOP':\n      {\n        const getTimers = state.timers;\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0];\n        getTimer.loop = action.value.loop * 1;\n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t);\n        return { ...state,\n          timers: newTimers\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kiritoshimura/Desktop/intervaltimer/frontend/src/modules/reducer.js"],"names":["initialState","uid","timers","id","name","interval","loop","reducer","state","action","type","initialTimer","newTimer","Object","assign","newTimers","value","timerName","reduce","p","c","push","filter","t","timersId","getTimers","getTimer","map","console","log","index","intervalTime"],"mappings":"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","sourcesContent":["// 初期State\nconst initialState = {    \n        uid:0,        \n        timers:[\n          {\n            id:0,\n            name:'筋トレ',            \n            interval:[40,20,10],\n            loop:5\n          }\n        ]      \n  }\n\n  // Reducer処理\n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'ADD_TIMER': {\n        const initialTimer = { \n          id:0,\n          name:'',            \n          interval:[],\n          loop:5\n        }\n        const newTimer = Object.assign({},initialTimer)\n        const newTimers = state.timers\n        newTimer.name = action.value.timerName  \n        // idの付与\n        newTimer.id = newTimers.reduce((p,c) => p > c.id ? p : c.id , 0) + 1\n        newTimers.push(newTimer)             \n        return { ...state, timers: newTimers }\n      }\n      case 'DELETE_TIMER': {        \n        const newTimers = state.timers.filter(t => t.id !== action.value.timersId)\n        return { ...state, timers: newTimers }\n      }\n      case 'ADD_INTERVAL_TIMER': {        \n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]        \n        getTimer.interval.push(5)        \n        const newTimers = getTimers.map(t => \n          { \n            if(t.id === action.value.timersId){\n              console.log('equal');\n              console.log(t.id);\n              console.log(getTimer);\n              return getTimer\n            }else{\n              console.log('not equal');\n              console.log(t.id);\n              console.log(t);\n              return t\n            }\n          })\n          // t.id === action.value.timersId ? getTimer : t)\n        return { ...state, timers: newTimers }\n      }\n      case 'UPDATE_INTERVAL_TIMER': {        \n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]\n        getTimer.interval[action.value.index] = action.value.intervalTime * 1        \n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t)        \n        return { ...state, timers: newTimers }\n      }\n      case 'UPDATE_LOOP': {\n        const getTimers = state.timers\n        const getTimer = getTimers.filter(t => t.id === action.value.timersId)[0]        \n        getTimer.loop = action.value.loop * 1        \n        const newTimers = getTimers.map(t => t.id === action.value.timersId ? getTimer : t)        \n        return { ...state, timers: newTimers }\n      }\n      default: {\n        return state\n      }\n    }\n  }\n  \n  export default reducer"]},"metadata":{},"sourceType":"module"}